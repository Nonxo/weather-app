{"version":3,"sources":["components/Loader.js","redux/actions/actionCreator.js","redux/actions/index.js","components/Pagination.js","components/Chart.js","components/WeatherCards.js","pages/dashboard/dashboard.js","App.js","reportWebVitals.js","redux/reducer/weatherReducer.js","redux/reducer/index.js","redux/service.js","redux/saga/weatherSaga.js","redux/saga/index.js","redux/Store.js","index.js"],"names":["useStyles","makeStyles","root","width","backgroundColor","Loader","classes","Fragment","className","Skeleton","animation","handleRequest","type","payload","handleSuccess","data","handleError","error","FETCH_WEATHER_DATA","FETCH_WEATHER_DATA_SUCCESS","FETCH_WEATHER_DATA_ERROR","FETCH_WEATHER_PAGINATION","FETCH_WEATHER_BY_DATE","theme","marginTop","spacing","PaginationOutlined","pageCount","gotoPage","pageSize","useState","currentPage","setCurrentPage","Pagination","count","variant","color","size","page","onChange","event","value","Chart","tempType","weatherSelector","useSelector","state","Weather","labels","weatherPerHour","length","map","weather","dt","datasets","label","Math","round","temp","borderColor","borderWidth","options","showScale","pointDot","showLines","scales","yAxes","ticks","beginAtZero","min","max","minWidth","background","border","borderRadius","marginRight","cursor","boxShadow","active","title","fontSize","textShadow","text","icon","display","justifyContent","WeatherCards","selectedCard","setSelectedCard","dispatch","useDispatch","displayForecastPerHour","index","weatherPerDay","findIndex","obj","findIndexOfSelectedCard","card","find","findCardSelected","types","start","end","loading","weatherPerPage","weatherInfo","Card","onClick","CardContent","Typography","gutterBottom","city","name","country","component","style","main","src","height","alt","description","dateString","dt_txt","Date","replace","toDateString","minHeight","overflow","flexDirection","cards","maxWidth","chart","maxHeight","CustomRadio","withStyles","checked","props","Radio","Dashboard","selectedTemp","setSelectedTemp","handleChange","target","useEffect","CssBaseline","Box","my","mx","m","FormControlLabel","control","inputProps","ceil","total","p","App","store","data-testid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","dateRange","setHours","getHours","getTimezoneOffset","to","getMinutes","getSeconds","getWeatherPerHour","arr","timeline","forecast","push","formatDateStringAsTime","apiDate","getTime","getWeatherPerDay","i","input","time","toTimeString","split","weatherReducer","weatherList","action","list","slice","rootReducer","combineReducers","getWeatherData","unit","axios","get","response","read","watchWeather","call","res","status","put","takeLatest","rootSaga","all","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","Store","createStore","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2512d72.chunk.js","sourcesContent":["import React from \"react\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { makeStyles } from \"@material-ui/styles\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: 300,\n    backgroundColor: \"transparent\",\n  },\n});\n\nconst Loader = () => {\n  const classes = useStyles();\n  return (\n    <React.Fragment>\n      <div className={classes.root}>\n        <Skeleton />\n        <Skeleton animation={false} />\n        <Skeleton animation=\"wave\" />\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Loader;\n","export const handleRequest = (type, payload = null) => ({ type, payload });\nexport const handleSuccess = (type, data = null) => ({ type, data });\nexport const handleError = (type, error = null) => ({ type, error });\n","// Weather Actions\nexport const FETCH_WEATHER_DATA = \"FETCH_WEATHER_DATA\";\nexport const FETCH_WEATHER_DATA_SUCCESS = \"FETCH_WEATHER_DATA_SUCCESS\";\nexport const FETCH_WEATHER_DATA_ERROR = \"FETCH_WEATHER_DATA_ERROR\";\n\n// Weather with Pagination\nexport const FETCH_WEATHER_PAGINATION = \"FETCH_WEATHER_PAGINATION\";\n\n// Weather forecast by Selected date\nexport const FETCH_WEATHER_BY_DATE = \"FETCH_WEATHER_BY_DATE\";\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& > *\": {\n      marginTop: theme.spacing(0),\n    },\n  },\n}));\n\nconst PaginationOutlined = ({ pageCount, gotoPage, pageSize }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const classes = useStyles();\n\n  const handleChange = (event, value) => {\n    setCurrentPage(value);\n    gotoPage(value, pageSize);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Pagination\n        count={pageCount ? pageCount : 1}\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"large\"\n        page={currentPage}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default PaginationOutlined;\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { useSelector } from \"react-redux\";\n\nconst Chart = ({ tempType }) => {\n  const weatherSelector = useSelector((state) => state.Weather);\n  const data = {\n    labels:\n      weatherSelector.weatherPerHour.length > 0\n        ? weatherSelector.weatherPerHour.map((weather) => weather.dt)\n        : [],\n    datasets: [\n      {\n        label: `Temperatures in ${\n          tempType === \"metric\" ? \"Celsius\" : \"Fahrenheit\"\n        }`,\n        data:\n          weatherSelector && weatherSelector.weatherPerHour.length > 0\n            ? weatherSelector.weatherPerHour.map((weather) =>\n                Math.round(weather.temp)\n              )\n            : [],\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(255, 206, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n        ],\n        borderColor: [\n          \"rgba(255, 99, 132, 1)\",\n          \"rgba(54, 162, 235, 1)\",\n          \"rgba(255, 206, 86, 1)\",\n          \"rgba(75, 192, 192, 1)\",\n          \"rgba(153, 102, 255, 1)\",\n          \"rgba(255, 159, 64, 1)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const options = {\n    showScale: true,\n    pointDot: true,\n    showLines: false,\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n            min: 0,\n            max: 100,\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <React.Fragment>\n      <Bar data={data} options={options} />\n    </React.Fragment>\n  );\n};\n\nexport default Chart;\n","import React, { useState } from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { handleRequest } from \"../redux/actions/actionCreator\";\nimport * as types from \"../redux/actions\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 200,\n    background: \"rgba(0, 0, 0, 0.1)\",\n    border: \"none\",\n    borderRadius: \"15px\",\n    marginRight: \"30px\",\n    marginTop: \"10px\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      background: \"linear-gradient(to right, #00416a, #e4e5e6)\",\n      boxShadow: \"5px 3px 10px 0px rgba(0,0,0,0.5)\",\n    },\n    \"&:focus\": {\n      boxShadow: \"5px 3px 10px 0px rgba(0,0,0,0.5)\",\n    },\n  },\n  active: {\n    background: \"linear-gradient(to right, #00416a, #e4e5e6)\",\n    boxShadow: \"5px 3px 10px 0px rgba(0,0,0,0.5)\",\n  },\n  title: {\n    fontSize: 14,\n    color: \"#fff\",\n    textShadow: \"2px 2px 2px rgba(150, 150, 150, 0.5)\",\n  },\n  text: {\n    color: \"#fff\",\n    textShadow: \"2px 2px 2px rgba(150, 150, 150, 0.7)\",\n  },\n  icon: {\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n  },\n});\n\nconst WeatherCards = ({ tempType }) => {\n  const weatherSelector = useSelector((state) => state.Weather);\n  const [selectedCard, setSelectedCard] = useState({});\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  // Format date to human readable\n  const formatDate = (dateString) => {\n    const d = new Date(dateString.replace(\" \", \"T\"));\n    return d.toDateString();\n  };\n\n  // Find the index of the weather card selected\n  const findIndexOfSelectedCard = (dt) => {\n    return weatherSelector.weatherPerDay.findIndex((obj) => obj.dt === dt);\n  };\n\n  // Find the weather card selected\n  const findCardSelected = (dt) => {\n    return weatherSelector.weatherPerDay.find((obj) => obj.dt === dt);\n  };\n\n  // Dispatch action to fetch weather by hour with 3hours interval\n  const displayForecastPerHour = (dt) => {\n    const index = findIndexOfSelectedCard(dt);\n    const card = findCardSelected(dt);\n    setSelectedCard(card);\n    dispatch(\n      handleRequest(types.FETCH_WEATHER_BY_DATE, {\n        start: index * 8,\n        end: index * 8 + 8,\n      })\n    );\n  };\n\n  return (\n    <React.Fragment>\n      {!weatherSelector.loading &&\n        weatherSelector.weatherPerPage.map((weatherInfo, index) => (\n          <React.Fragment key={index + 1}>\n            <Card\n              className={\n                selectedCard.dt === weatherInfo.dt\n                  ? `${classes.root} ${classes.active}`\n                  : classes.root\n              }\n              variant=\"outlined\"\n              onClick={() => displayForecastPerHour(weatherInfo.dt)}\n            >\n              <CardContent>\n                <Typography className={classes.title} gutterBottom>\n                  {weatherSelector.data.city.name},{\" \"}\n                  {weatherSelector.data.city.country}\n                </Typography>\n                {tempType === \"imperial\" && (\n                  <Typography\n                    variant=\"h5\"\n                    component=\"h2\"\n                    style={{\n                      color: \"#fff\",\n                      textShadow: \"2px 2px 2px rgba(150, 150, 150, 0.5)\",\n                    }}\n                  >\n                    {Math.round(weatherInfo.main.temp) + \"°F\"}\n                  </Typography>\n                )}\n                {tempType === \"metric\" && (\n                  <Typography\n                    variant=\"h5\"\n                    component=\"h2\"\n                    className={classes.text}\n                  >\n                    {Math.round(weatherInfo.main.temp) + \"°C\"}\n                  </Typography>\n                )}\n                <img\n                  className={classes.icon}\n                  src={`http://openweathermap.org/img/w/${weatherInfo?.weather[0].icon}.png`}\n                  height={40}\n                  width={40}\n                  alt={`${weatherInfo?.weather[0].main}`}\n                />\n                <Typography\n                  variant=\"body2\"\n                  component=\"div\"\n                  display=\"inline\"\n                  className={classes.text}\n                >\n                  {weatherInfo.weather[0].description} <br />\n                  {formatDate(weatherInfo.dt_txt)}\n                </Typography>\n              </CardContent>\n            </Card>\n          </React.Fragment>\n        ))}\n    </React.Fragment>\n  );\n};\n\nexport default WeatherCards;\n","import React, { useEffect, useState } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport { makeStyles, withStyles } from \"@material-ui/styles\";\nimport Loader from \"../../components/Loader\";\nimport Box from \"@material-ui/core/Box\";\nimport Radio from \"@material-ui/core/Radio\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { handleRequest } from \"../../redux/actions/actionCreator\";\nimport * as types from \"../../redux/actions\";\nimport PaginationOutlined from \"../../components/Pagination\";\nimport Chart from \"../../components/Chart\";\nimport WeatherCards from \"../../components/WeatherCards\";\n\nconst useStyles = makeStyles({\n  root: {\n    minHeight: \"100vh\",\n    overflow: \"hidden\",\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cards: {\n    maxWidth: \"100%\",\n    overflow: \"auto\",\n  },\n  chart: {\n    maxWidth: \"100%\",\n    maxHeight: \"100%\",\n  },\n});\n\nconst CustomRadio = withStyles({\n  root: {\n    color: \"#041126\",\n    \"&$checked\": {\n      color: \"#092654\",\n    },\n  },\n  checked: {},\n})((props) => <Radio color=\"default\" {...props} />);\n\nconst Dashboard = () => {\n  const weatherSelector = useSelector((state) => state.Weather);\n  const [selectedTemp, setSelectedTemp] = useState(\"imperial\");\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const limit = 3;\n\n  // Handle Temperature unit change\n  const handleChange = (event) => {\n    setSelectedTemp(event.target.value);\n  };\n\n  // Fetch all weather data\n  const fetchWeatherData = () => {\n    dispatch(handleRequest(types.FETCH_WEATHER_DATA, selectedTemp));\n  };\n\n  // Handle page changes\n  const handlePageChange = (page, size) => {\n    const start = (page - 1) * size;\n    const end = page * size;\n    dispatch(\n      handleRequest(types.FETCH_WEATHER_PAGINATION, {\n        start,\n        end,\n      })\n    );\n  };\n\n  useEffect(() => {\n    fetchWeatherData();\n  }, [selectedTemp]);\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <div className={classes.root}>\n        {weatherSelector.loading ? (\n          <Box my=\"auto\" mx=\"auto\">\n            <Loader />\n          </Box>\n        ) : (\n          <Box display=\"flex\" flexDirection=\"column\">\n            <Box\n              display=\"flex\"\n              flexDirection=\"row\"\n              justifyContent=\"space-around\"\n              m={3}\n            >\n              <FormControlLabel\n                value=\"end\"\n                control={\n                  <CustomRadio\n                    checked={selectedTemp === \"metric\"}\n                    onChange={handleChange}\n                    value=\"metric\"\n                    name=\"temp_celsius\"\n                    inputProps={{ \"aria-label\": \"Celsius\" }}\n                  />\n                }\n                label=\"Celsius\"\n              />\n              <FormControlLabel\n                value=\"end\"\n                control={\n                  <CustomRadio\n                    checked={selectedTemp === \"imperial\"}\n                    onChange={handleChange}\n                    value=\"imperial\"\n                    name=\"temp_fahrenheit\"\n                    inputProps={{ \"aria-label\": \"Fahrenheit\" }}\n                  />\n                }\n                label=\"Fahrenheit\"\n              />\n            </Box>\n            <Box\n              display=\"flex\"\n              flexDirection=\"row\"\n              justifyContent=\"center\"\n              my=\"auto\"\n            >\n              <PaginationOutlined\n                pageCount={Math.ceil(weatherSelector.total / limit)}\n                gotoPage={handlePageChange}\n                pageSize={limit}\n              />\n            </Box>\n            <Box\n              component=\"div\"\n              display=\"flex\"\n              flexDirection=\"row\"\n              p={2}\n              my={5}\n              mx=\"auto\"\n              className={classes.cards}\n            >\n              <WeatherCards tempType={selectedTemp} />\n            </Box>\n            <Box\n              display=\"flex\"\n              flexDirection=\"row\"\n              mx=\"auto\"\n              className={classes.chart}\n            >\n              <Chart tempType={selectedTemp} />\n            </Box>\n          </Box>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport \"./App.css\";\nimport Dashboard from \"./pages/dashboard/dashboard\";\nimport { Provider } from \"react-redux\";\n\nfunction App({ store }) {\n  return (\n    <Provider store={store}>\n      <div data-testid=\"app\" className=\"app\">\n        <Dashboard />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as types from \"../actions\";\n\nconst weatherReducer = (\n  state = {\n    data: {},\n    weatherList: [],\n    weatherPerPage: [],\n    weatherPerHour: [],\n    weatherPerDay: [],\n  },\n  action\n) => {\n  switch (action.type) {\n    case types.FETCH_WEATHER_DATA:\n      return {\n        ...state,\n        loading: true,\n      };\n    case types.FETCH_WEATHER_DATA_SUCCESS:\n      return {\n        ...state,\n        data: action.data,\n        weatherList: action.data.list,\n      };\n    case types.FETCH_WEATHER_DATA_ERROR:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n      };\n    case types.FETCH_WEATHER_PAGINATION:\n      return {\n        ...state,\n        loading: false,\n        weatherPerPage: getWeatherPerDay([...state.data.list]).slice(\n          action.payload.start,\n          action.payload.end\n        ),\n        weatherPerDay: getWeatherPerDay([...state.data.list]),\n        total: getWeatherPerDay([...state.data.list]).length,\n      };\n    case types.FETCH_WEATHER_BY_DATE:\n      return {\n        ...state,\n        loading: false,\n        weatherPerHour: getWeatherPerHour(\n          [...state.weatherList].slice(action.payload.start, action.payload.end)\n        ),\n      };\n    default:\n      return state;\n  }\n};\n\nconst dateRange = () => {\n  const start = new Date();\n  start.setHours(start.getHours() + start.getTimezoneOffset() / 60);\n  const to = new Date(start);\n  to.setHours(to.getHours() + 2, to.getMinutes() + 59, to.getSeconds() + 59);\n\n  return { start, to };\n};\n\nconst getWeatherPerHour = (arr) => {\n  const timeline = [];\n  for (const forecast of arr) {\n    timeline.push({\n      dt: formatDateStringAsTime(forecast.dt_txt),\n      temp: forecast.main.temp,\n    });\n    const apiDate = new Date(forecast.dt_txt).getTime();\n\n    if (\n      dateRange().start.getTime() <= apiDate &&\n      dateRange().to.getTime() >= apiDate\n    ) {\n    }\n  }\n  return timeline;\n};\n\nconst getWeatherPerDay = (arr) => {\n  const weather = [];\n  for (let i = 0; i < arr.length; i = i + 8) {\n    weather.push(arr[i]);\n  }\n  return weather;\n};\n\nconst formatDateStringAsTime = (input) => {\n  const date = new Date(input.replace(\" \", \"T\"));\n  const time = date.toTimeString().split(\" \")[0];\n  // Output what you need\n  return time.split(\":\")[0] + \":\" + time.split(\":\")[1];\n};\n\nexport default weatherReducer;\n","import { combineReducers } from \"redux\";\n\nimport Weather from \"./weatherReducer\";\n\nconst rootReducer = combineReducers({ Weather });\n\nexport default rootReducer;\n","import axios from \"axios\";\n\nexport const getWeatherData = (unit) => {\n  return axios\n    .get(\n      `https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&units=${unit}&APPID=32946e5f4d8174ff9b9dccb19bd0fefe&cnt=40`\n    )\n    .then((response) => response);\n};\n","import { getWeatherData } from \"../service\";\nimport { call, put, takeLatest } from \"@redux-saga/core/effects\";\nimport {\n  handleError,\n  handleRequest,\n  handleSuccess,\n} from \"../actions/actionCreator\";\nimport * as types from \"../actions\";\n\nfunction* read(action) {\n  try {\n    const res = yield call(getWeatherData, action.payload);\n    if (res.status === 200) {\n      yield put(handleSuccess(types.FETCH_WEATHER_DATA_SUCCESS, res.data));\n      yield put(\n        handleRequest(types.FETCH_WEATHER_PAGINATION, { start: 0, end: 3 })\n      );\n      yield put(\n        handleRequest(types.FETCH_WEATHER_BY_DATE, { start: 0, end: 8 })\n      );\n    } else {\n      yield put(\n        handleError(types.FETCH_WEATHER_DATA_ERROR, \"No weather to show\")\n      );\n    }\n  } catch (err) {\n    yield put(handleError(types.FETCH_WEATHER_DATA_ERROR, err));\n  }\n}\n\nexport default function* watchWeather() {\n  yield takeLatest(types.FETCH_WEATHER_DATA, read);\n}\n","import watchWeather from \"./weatherSaga\";\nimport { all } from \"@redux-saga/core/effects\";\n\nfunction* rootSaga() {\n  yield all([watchWeather()]);\n}\n\nexport default rootSaga;\n","import { applyMiddleware, compose, createStore } from \"redux\";\nimport createSagaMiddleware from \"@redux-saga/core\";\nimport rootReducer from \"./reducer\";\nimport rootSaga from \"./saga\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst Store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\nsagaMiddleware.run(rootSaga);\n\nexport default Store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Store from \"./redux/Store\";\n\nReactDOM.render(<App store={Store} />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}